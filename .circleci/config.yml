# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # test
        - image: circleci/openjdk:8-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m
      MAVEN_CONFIG: "-s .circleci/.circleci.settings.xml -ntp -B"

    steps:
      - checkout

      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "pom.xml" }}
            - v2-dependencies-

      # TODO: does not work well with multimodule project
      #- run: mvn dependency:resolve-plugins dependency:go-offline


      # run tests!
      - run: ./mvnw -N install
      - run: ./mvnw install
      - save_cache:
          paths:
            - ~/.m2
          key: v2-dependencies-{{ checksum "pom.xml" }}
      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/junit/ \;
            find . -type f -regex ".*/target/failsafe-reports/.*xml" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit
  deploy-vaadin8:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo
    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m
      MAVEN_CONFIG: "-s .circleci/.circleci.settings.xml -ntp -B"
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "pom.xml" }}
      - run: ./mvnw -Prelease,release-vaadin8 -pl :vaadin8-sockjs,:vertx-vaadin8 -DskipTests clean deploy
      - run: ./tools/build_v8_widgetsets.sh deploy
  deploy-vaadin-flow:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo
    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m
      MAVEN_CONFIG: "-s .circleci/.circleci.settings.xml -ntp -B"
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "pom.xml" }}
            - v2-dependencies-
      - run: ./mvnw -Prelease,release-flow -pl :vaadin-flow-sockjs,:vertx-vaadin-flow -DskipTests clean deploy
      - run: ./tools/build_flow_widgetsets.sh deploy
  ui-tests:
    docker:
      - image: circleci/openjdk:8-jdk-browsers
    working_directory: ~/repo
    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx1024m

    steps:
      - checkout
      - restore_cache:
          keys:
            - ui-tests-dependencies-{{ checksum "pom.xml" }}

      - run:
          name: "Setup custom environment variables"
          command: |
            echo "export WKDIR=$(pwd)" >> $BASH_ENV
            echo "export MAVEN_CONFIG='-B -ntp -s $(pwd)/.circleci/.circleci.settings.xml'" >> $BASH_ENV
            echo "export CHROME_VERSION=$(google-chrome --version | sed 's/^Google Chrome //' | cut -d. -f1)" >> $BASH_ENV
            echo "export FIREFOX_VERSION=$(firefox --version | sed 's/Mozilla Firefox //' |  cut -d. -f1)" >> $BASH_ENV

      - run:
          name: "Install artifacts"
          command: ./mvnw -N install && ./mvnw -Pcircleci -Prelease-flow,flow-ui-tests install -DskipTests -DskipVertxRun=true
      - run: >
          cd vertx-vaadin-flow-parent/vertx-vaadin-tests/test-root-context &&
          rm -rf node node_modules package-lock.json &&
          $WKDIR/mvnw -Pcircleci -Dvaadin.productionMode clean package &&
          $WKDIR/mvnw -Pcircleci -Dvaadin.proKey=${VAADIN_PROKEY} -Dwebdriver.chrome.driver=/usr/local/bin/chromedriver
          -Duitest.chrome-version=${CHROME_VERSION} -Duitest.firefox-version=${FIREFOX_VERSION}
          -Dvertx.jvmArguments="-Dorg.slf4j.simpleLogger.logFile=/tmp/verticle.log -Xmx512M -Dvertx.logger-delegate-factory-class-name=io.vertx.core.logging.SLF4JLogDelegateFactory"
          verify
      - save_cache:
          paths:
            - ~/.vaadin
            - ~/.m2
          key: ui-tests-dependencies-{{ checksum "pom.xml" }}
          when: always
      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit-uitests/
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/junit-uitests/ \;
            find . -type f -regex ".*/target/failsafe-reports/.*xml" -exec cp {} ~/junit-uitests/ \;
            find . -type f -regex ".*/target/surefire-reports/.*txt" -exec cp {} ~/junit-uitests/ \;
            find . -type f -regex ".*/target/failsafe-reports/.*txt" -exec cp {} ~/junit-uitests/ \;
            cp /tmp/verticle.log ~/junit-uitests/
          when: always
      - store_test_results:
          path: ~/junit-uitests
      - store_artifacts:
          path: ~/junit-uitests
      - store_artifacts:
          path: ~/repo/vertx-vaadin-flow-parent/vertx-vaadin-tests/test-root-context/error-screenshots
          destination: error-screenshots


workflows:
  version: 2
  build-only:
    jobs:
      - build:
          filters:
            branches:
              ignore: /^.*ui_tests.*/
  ui-tests:
    triggers:
      - schedule:
          cron: "0 0 * * 3"
          filters:
            branches:
              only:
                - master
                - vaadin-14.2
    jobs:
      - ui-tests
  build-deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      - deploy-vaadin8:
          requires:
            - build
          filters:
            tags:
              only: /^v8-.*/
            branches:
              ignore: /.*/
      - deploy-vaadin-flow:
          requires:
            - build
          filters:
            tags:
              only: /^flow-.*/
            branches:
              ignore: /.*/

